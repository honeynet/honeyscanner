{
  "0.6.0": {
    "lxml": [
      {
        "name": "lxml",
        "installed_version": "4.2.4",
        "affected_versions": "<4.2.5",
        "cve": "CVE-2018-19787",
        "vulnerability_id": "pyup.io-50747",
        "advisory": "Lxml 4.2.5 includes a fix for CVE-2018-19787: lxml/html/clean.py in the lxml.html.clean module does not remove javascript: URLs that use escaping, allowing a remote attacker to conduct XSS attacks, as demonstrated by \"j a v a s c r i p t:\" in Internet Explorer. This is a similar issue to CVE-2014-3146.",
        "cvss_score": null
      },
      {
        "name": "lxml",
        "installed_version": "4.2.4",
        "affected_versions": "<4.4.0",
        "cve": "PVE-2021-39195",
        "vulnerability_id": "pyup.io-39195",
        "advisory": "In lxml before 4.4.0, when writing to file paths that contain the URL escape character '%', the file path could wrongly be mangled by URL unescaping and thus write to a different file or directory.  Code that writes to file paths that are provided by untrusted sources, but that must work with previous versions of lxml, should best either reject paths that contain '%' characters, or otherwise make sure that the path does not contain maliciously injected '%XX' URL hex escapes for paths like '../'.\r\nhttps://github.com/lxml/lxml/commit/0245aba002f069a0b157282707bdf77418d1b5be",
        "cvss_score": null
      },
      {
        "name": "lxml",
        "installed_version": "4.2.4",
        "affected_versions": "<4.6.2",
        "cve": "CVE-2020-27783",
        "vulnerability_id": "pyup.io-39194",
        "advisory": "Lxml 4.6.2 includes a fix for CVE-2020-27783: A XSS vulnerability was discovered in python-lxml's clean module. The module's parser didn't properly imitate browsers, which caused different behaviors between the sanitizer and the user's page. A remote attacker could exploit this flaw to run arbitrary HTML/JS code.",
        "cvss_score": 6.1
      },
      {
        "name": "lxml",
        "installed_version": "4.2.4",
        "affected_versions": "<4.6.3",
        "cve": "CVE-2021-28957",
        "vulnerability_id": "pyup.io-40072",
        "advisory": "Lxml version 4.6.3 includes a fix for CVE-2021-28957: An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formation attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML.\r\nhttps://bugs.launchpad.net/lxml/+bug/1888153",
        "cvss_score": 6.1
      },
      {
        "name": "lxml",
        "installed_version": "4.2.4",
        "affected_versions": "<4.6.5",
        "cve": "CVE-2021-43818",
        "vulnerability_id": "pyup.io-43366",
        "advisory": "Lxml 4.6.5 includes a fix for CVE-2021-43818: Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch.",
        "cvss_score": 7.1
      },
      {
        "name": "lxml",
        "installed_version": "4.2.4",
        "affected_versions": "<4.9.1",
        "cve": "CVE-2022-2309",
        "vulnerability_id": "pyup.io-50748",
        "advisory": "Lxml 4.9.1 includes a fix for CVE-2022-2309: NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
        "cvss_score": 7.5
      }
    ],
    "bottle": [
      {
        "name": "bottle",
        "installed_version": "0.12.13",
        "affected_versions": "<0.12.19",
        "cve": "CVE-2020-28473",
        "vulnerability_id": "pyup.io-39461",
        "advisory": "The package bottle from 0 and before 0.12.19 are vulnerable to Web Cache Poisoning by using a vector called parameter cloaking. When the attacker can separate query parameters using a semicolon (;), they can cause a difference in the interpretation of the request between the proxy (running with default configuration) and the server. This can result in malicious requests being cached as completely safe ones, as the proxy would usually not see the semicolon as a separator, and therefore would not include it in a cache key of an unkeyed parameter. See CVE-2020-28473.",
        "cvss_score": 6.8
      },
      {
        "name": "bottle",
        "installed_version": "0.12.13",
        "affected_versions": "<0.12.20",
        "cve": "CVE-2022-31799",
        "vulnerability_id": "pyup.io-49258",
        "advisory": "Bottle before 0.12.20 mishandles errors during early request binding.",
        "cvss_score": 9.8
      }
    ],
    "jinja2": [
      {
        "name": "jinja2",
        "installed_version": "2.10",
        "affected_versions": "<2.11.3",
        "cve": "CVE-2020-28493",
        "vulnerability_id": "pyup.io-39525",
        "advisory": "This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDoS vulnerability is mainly due to the '_punctuation_re regex' operator and its use of multiple wildcards. The last wildcard is the most exploitable as it searches for trailing punctuation. This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory.",
        "cvss_score": 5.3
      },
      {
        "name": "jinja2",
        "installed_version": "2.10",
        "affected_versions": "<3.1.3",
        "cve": "CVE-2024-22195",
        "vulnerability_id": "pyup.io-64227",
        "advisory": "Jinja2 before 3.1.3 is affected by a Cross-Site Scripting vulnerability. Special placeholders in the template allow writing code similar to Python syntax. It is possible to inject arbitrary HTML attributes into the rendered HTML template. The Jinja 'xmlattr' filter can be abused to inject arbitrary HTML attribute keys and values, bypassing the auto escaping mechanism and potentially leading to XSS. It may also be possible to bypass attribute validation checks if they are blacklist-based.",
        "cvss_score": 6.1
      },
      {
        "name": "jinja2",
        "installed_version": "2.10",
        "affected_versions": ">=0,<2.10.1",
        "cve": "CVE-2019-10906",
        "vulnerability_id": "pyup.io-54679",
        "advisory": "Jinja2 2.10.1 adds 'SandboxedEnvironment' to handle 'str.format_map' in order to prevent code execution through untrusted format strings.\r\nhttps://github.com/pallets/jinja/commit/a2a6c930bcca591a25d2b316fcfd2d6793897b26",
        "cvss_score": 8.6
      }
    ],
    "requests": [
      {
        "name": "requests",
        "installed_version": "2.19.1",
        "affected_versions": "<=2.19.1",
        "cve": "CVE-2018-18074",
        "vulnerability_id": "pyup.io-36546",
        "advisory": "Requests before 2.20.0 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network.",
        "cvss_score": 7.5
      },
      {
        "name": "requests",
        "installed_version": "2.19.1",
        "affected_versions": ">=2.3.0,<2.31.0",
        "cve": "CVE-2023-32681",
        "vulnerability_id": "pyup.io-58755",
        "advisory": "Requests 2.31.0 includes a fix for CVE-2023-32681: Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information.",
        "cvss_score": 6.1
      }
    ],
    "sphinx": [
      {
        "name": "sphinx",
        "installed_version": "1.7.7",
        "affected_versions": "<3.0.4",
        "cve": "CVE-2020-11023",
        "vulnerability_id": "pyup.io-45775",
        "advisory": "Sphinx 3.0.4 updates jQuery version from 3.4.1 to 3.5.1 for security reasons.",
        "cvss_score": 6.1
      },
      {
        "name": "sphinx",
        "installed_version": "1.7.7",
        "affected_versions": "<3.0.4",
        "cve": "CVE-2020-11022",
        "vulnerability_id": "pyup.io-38330",
        "advisory": "Sphinx 3.0.4 updates jQuery version from 3.4.1 to 3.5.1 for security reasons.",
        "cvss_score": 6.1
      },
      {
        "name": "sphinx",
        "installed_version": "1.7.7",
        "affected_versions": "<3.3.0",
        "cve": "PVE-2023-59910",
        "vulnerability_id": "pyup.io-59910",
        "advisory": "Sphinx 3.3.0 includes a fix for a ReDoS vulnerability in docstring.\r\nhttps://github.com/sphinx-doc/sphinx/issues/8172\r\nhttps://github.com/sphinx-doc/sphinx/commit/f00e75278c5999f40b214d8934357fbf0e705417",
        "cvss_score": null
      },
      {
        "name": "sphinx",
        "installed_version": "1.7.7",
        "affected_versions": "<3.3.0",
        "cve": "PVE-2023-59925",
        "vulnerability_id": "pyup.io-59925",
        "advisory": "Sphinx 3.3.0 includes a fix for a ReDoS vulnerability in inventory.\r\nhttps://github.com/sphinx-doc/sphinx/issues/8175\r\nhttps://github.com/sphinx-doc/sphinx/commit/f7b872e673f9b359a61fd287a7338a28077840d2",
        "cvss_score": null
      }
    ],
    "libtaxii": [
      {
        "name": "libtaxii",
        "installed_version": "1.1.111",
        "affected_versions": ">=0,<1.1.118",
        "cve": "CVE-2020-27197",
        "vulnerability_id": "pyup.io-54231",
        "advisory": "Libtaxii 1.1.118 includes a fix for CVE-2020-27197:TAXII libtaxii through 1.1.117, as used in EclecticIQ OpenTAXII through 0.2.0 and other products, allows SSRF via an initial http:// substring to the parse method, even when the no_network setting is used for the XML parser. \r\nNOTE: the vendor points out that the parse method \"wraps the lxml library\" and that this may be an issue to \"raise ... to the lxml group.\"\r\nhttps://github.com/TAXIIProject/libtaxii/pull/247/commits/e8918f07ef86f6a5ea9778fcd443784f4b13277e",
        "cvss_score": null
      }
    ],
    "scapy": [
      {
        "name": "scapy",
        "installed_version": "2.4.0",
        "affected_versions": "<2.4.1",
        "cve": "CVE-2019-1010142",
        "vulnerability_id": "pyup.io-37341",
        "advisory": "Scapy 2.4.1 includes a fix for CVE-2019-1010142: Denial of Service. The impact is infinite loop, resource consumption and program unresponsive. The component affected component is '_RADIUSAttrPacketListField.getfield(self..)'. The attack vector is over the network or a malicious pcap.\r\nhttps://github.com/secdev/scapy/pull/1409/commits/0d7ae2b039f650a40e511d09eb961c782da025d9",
        "cvss_score": 7.5
      }
    ],
    "pycrypto": [
      {
        "name": "pycrypto",
        "installed_version": "2.6.1",
        "affected_versions": "<=2.6.1",
        "cve": "CVE-2013-7459",
        "vulnerability_id": "pyup.io-35015",
        "advisory": "Heap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) 2.6.1 allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py.",
        "cvss_score": null
      },
      {
        "name": "pycrypto",
        "installed_version": "2.6.1",
        "affected_versions": "<=2.6.1",
        "cve": "CVE-2013-7459",
        "vulnerability_id": "pyup.io-35015",
        "advisory": "Heap-based buffer overflow in the ALGnew function in block_templace.c in Python Cryptography Toolkit (aka pycrypto) 2.6.1 allows remote attackers to execute arbitrary code as demonstrated by a crafted iv parameter to cryptmsg.py.",
        "cvss_score": null
      }
    ],
    "tftpy": [
      {
        "name": "tftpy",
        "installed_version": "0.7.0",
        "affected_versions": ">=0,<0.8.1",
        "cve": "PVE-2024-99843",
        "vulnerability_id": "pyup.io-65577",
        "advisory": "Affected versions of the Python TFTP library, tftpy, are susceptible to a Directory Traversal vulnerability that allows unauthorized access beyond the tftproot directory. This occurs due to the library's inability to detect instances where sibling files or directories exist alongside tftproot, sharing a common prefix with it.",
        "cvss_score": null
      }
    ]
  }
}